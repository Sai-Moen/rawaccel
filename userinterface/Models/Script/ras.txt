RawAccelScript

Description:
	A way for users to automatically generate LUT points,
	while being nearly as easy to set up as preset modes.

Motivation:
	Ever since LUT released, people have used external tools to create curves,
	since creating the points manually is highly impractical and leads to weirdly overfitted curves.

	The problem with the external tools however, is that they present a barrier of entry for the average user to overcome.
	This barrier mostly consists of having to mess with and run someones python script (a security problem on its own),
	use something like WebPlotDigitizer and having to deal with whatever problems that might cause,
	or copy a Google sheet to their google drive and edit certain values and then copy those (somehow).
	After all that, they get to paste that into a textbox which serializes the points to some arbitrary length doubles.
	The only upside to this is that with the maximum amount of points Angle Snapping gets hidden better down the file.

	All of this just to do some math that they probably don't care too much about,
	to generate and save some points that they probably don't care about.
	The only thing they really need is a formula that integrates with RA,
	and allows the grapher to automatically calculate the points based on given parameters.

Basic File Structure:
	Frontend:
		These are the files concerned with deserializing the (human-readable) script.
		Proposed file name extension for custom script = .ras (RawAccelScript)

	Backend:
		These are the files that model the actual formula itself.
		They do so by interpreting the script that is loaded in from the frontend.
		This would only support very simple actions so that you can't delete System32 or anti-cheat from there.

Scripting language syntax:
	The input will be x, and the output will be whatever is in y (1 by default).
	Using control flow cleverly should make it so that multiple return, or even return at all, is not necessary,
	so there is not a return keyword.

	When a variable is used that has not been declared before the body,
	or an existing variable is used before the body, an error is thrown.

	Sections:
		1. Author's notes (side-effect of not lexing until square brackets)
		2. RawAccel parameters, delimited by []
		3. Temporary variables declaration
		4. RawAccel point evaluation, delimited by {}

	Reserved tokens:
		x y			"Input/Output variables"
		.			"Floating Point"
		( )			"Precedence"
		[ ]			"Header"
		{ }			"Body"
		: ;			"Control Flow Block / Line end"
		e pi tau	"Math Constants"
		
		All other keywords and operators are reserved as well.

	Control Flow:
		if bool: statement(s) :
		while bool: statement(s) :

		There are not actually bool values from the script's source code POV.

	Operators:
		=				"(Re-)Assignment"
		+ - * / % ^		"Arithmetic"
		+= -= *= /=	%=	"Compound Assignments"
		& | !			"Logical Operators"
		== < > <= >=	"Comparison Operators"

		There are C# System.Math functions for certain exponential functions,
		these conversions (e.g. e^x -> Exp(x) etc.) will be checked in the backend.

	Functions:
		abs ceil floor
		sqrt cbrt
		log log2 log10
		sin sinh asin asinh
		cos cosh acos acosh
		tan tanh atan atanh atan2

		These are all C# System.Math-supported functions with a very similar signature.